@using ElwaldeEquipment.Model;
@using ElwaldeEquipment.Services;
@inject IEmailSender _emailSender;
@inject NavigationManager navMan;

<div class="contact">
    <div class="contact-container">

        <h3>Contact Us</h3>
        <EditForm Model="@senderModel" OnValidSubmit="Submit">

            <DataAnnotationsValidator />
            <div class="form-group contact-input">
                <label>Full Name</label>
                <input type="text" class="form-control" @bind="@senderModel.FullName" placeholder="Enter Full Name">
                <ValidationMessage For="@(()=>senderModel.FullName)" />
            </div>
            <div class="form-group contact-input">
                <label>Email</label>
                <input type="email" class="form-control" @bind="@senderModel.Email" name="" id="" placeholder="Enter Email">
                <ValidationMessage For="@(()=>senderModel.Email)" />
            </div>
            <div class="form-group contact-input">
                <label>Phone Number</label>
                <input type="text" class="form-control" @bind="@senderModel.PhoneNumber" name="" id="" placeholder="Enter Phone Number">
                <ValidationMessage For="@(()=>senderModel.PhoneNumber)" />
            </div>
            <InputTextArea rows="5" placeholder="Write a message" @bind-Value="senderModel.Text" />
            <div class="form-group btn-contact-container">
                <button type="submit" class="btn btn-primary btn-contact">
                    <div class="@(spin?"spinner-border spinner-border-sm":" ")" role="status">
                    </div>
                    Send
                </button>
            </div>

        </EditForm>

    </div>
</div>

@code {
    bool spin = false;
    private SenderModel senderModel = new();

    private async void Submit()
    {
        
        spin = true;
        await Task.Delay(1);
        //
        try
        {
            string message = $"Sender Name: {senderModel.FullName} \n Email: {senderModel.Email} \n Phone Number:{senderModel.PhoneNumber}\n Text:{senderModel.Text}";
            await _emailSender.SendEmailAsync("walta.tekle@gmail.com", "Elwalde", $"You have new text message from your website,{message}");
            await _emailSender.SendEmailAsync(senderModel.Email, "Elwalde", $"Thank you for choosing us, our support staff will contact you as soon as possible.");
            navMan.NavigateTo("/contactinfo");
        }
        catch (Exception ex)
        {
            throw (ex);

        }
        spin = false;
       
        this.StateHasChanged();
    }

}
